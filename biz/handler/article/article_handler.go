// Code generated by hertz generator.

package article

import (
	"context"
	article "github.com/T4t4KAU/webx/biz/model/article"
	service "github.com/T4t4KAU/webx/biz/service/article"
	"github.com/T4t4KAU/webx/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Publish .
// @router /article/publish [POST]
func Publish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req article.ArticlePublishReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(article.ArticlePublishResp)

	err = service.NewArticleService(ctx, c).Publish(&req)
	r := utils.BuildBaseResp(err)
	resp.StatusCode = r.StatusCode
	resp.StatusMsg = r.StatusMsg

	c.JSON(consts.StatusOK, resp)
}

// Delete .
// @router /article/delete [POST]
func Delete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req article.ArticleDeleteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(article.ArticleDeleteResp)

	err = service.NewArticleService(ctx, c).Delete(&req)
	r := utils.BuildBaseResp(err)
	resp.StatusCode = r.StatusCode
	resp.StatusMsg = r.StatusMsg

	c.JSON(consts.StatusOK, resp)
}

// Edit .
// @router /article/edit [POST]
func Edit(ctx context.Context, c *app.RequestContext) {
	var err error
	var req article.ArticleEditReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(article.ArticleEditResp)

	err = service.NewArticleService(ctx, c).Edit(&req)
	r := utils.BuildBaseResp(err)
	resp.StatusCode = r.StatusCode
	resp.StatusMsg = r.StatusMsg

	c.JSON(consts.StatusOK, resp)
}

// GetInfo .
// @router /article/info [GET]
func GetInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req article.ArticleInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(article.ArticleInfoResp)

	ar, err := service.NewArticleService(ctx, c).GetInfo(&req)
	r := utils.BuildBaseResp(err)
	resp.StatusCode = r.StatusCode
	resp.StatusMsg = r.StatusMsg
	resp.Article = &ar

	c.JSON(consts.StatusOK, resp)
}

// Create .
// @router /article/create [GET]
func Create(ctx context.Context, c *app.RequestContext) {
	var err error
	var req article.ArticleCreateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(article.ArticleCreateResp)

	err = service.NewArticleService(ctx, c).Create(&req)
	r := utils.BuildBaseResp(err)
	resp.StatusCode = r.StatusCode
	resp.StatusMsg = r.StatusMsg

	c.JSON(consts.StatusOK, resp)
}
